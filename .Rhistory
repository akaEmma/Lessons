rps$ao.dt = ao.dt
rps$Addons = te$Addons
rps$addons = te$addons
cdt$award.name = items.df$award.name[rows]
cdt$item.pos = items.df$item.pos[rows]
rps$cdt = cdt
rps$awards = te$awards
li = lapply(cdt$chunk.ps.ind, function(ci) {
restore.point("dhfjdgjghbh")
ck = cdt[ci, ]
exi = ck$ex.ind
li = lapply(seq_along(ck$test.expr[[1]]), function(ei) {
restore.point("dhfjdgjghbh nfhdbfhb")
et = ck$test.expr[[1]][[ei]]
data.table(ex.ind = exi, chunk.ps.ind = ci, e.ind = ei,
test.e.ind = seq_along(et), test.ps.ind = 0,
test.passed = FALSE)
})
rbindlist(li)
})
cdt
ci
names(cdt)
ci = 1
cdt
debug(te.to.rps)
#name.rmd.chunks(sol.file)
create.ps(sol.file=sol.file, ps.name=ps.name, libs=libs)
debug(te.to.rps)
class(cdt)
Input = ("
Instructor       Student  Sodium
'Brendon Small'  a        1200
'Brendon Small'  b        1400
'Brendon Small'  c        1350
'Brendon Small'  d         950
'Brendon Small'  e        1400
'Brendon Small'  f        1150
'Brendon Small'  g        1300
'Brendon Small'  h        1325
'Brendon Small'  i        1425
'Brendon Small'  j        1500
'Brendon Small'  k        1250
'Brendon Small'  l        1150
'Brendon Small'  m         950
'Brendon Small'  n        1150
'Brendon Small'  o        1600
'Brendon Small'  p        1300
'Brendon Small'  q        1050
'Brendon Small'  r        1300
'Brendon Small'  s        1700
'Brendon Small'  t        1300
'Coach McGuirk'  u        1100
'Coach McGuirk'  v        1200
'Coach McGuirk'  w        1250
'Coach McGuirk'  x        1050
'Coach McGuirk'  y        1200
'Coach McGuirk'  z        1250
'Coach McGuirk'  aa       1350
'Coach McGuirk'  ab       1350
'Coach McGuirk'  ac       1325
'Coach McGuirk'  ad       1525
'Coach McGuirk'  ae       1225
'Coach McGuirk'  af       1125
'Coach McGuirk'  ag       1000
'Coach McGuirk'  ah       1125
'Coach McGuirk'  ai       1400
'Coach McGuirk'  aj       1200
'Coach McGuirk'  ak       1150
'Coach McGuirk'  al       1400
'Coach McGuirk'  am       1500
'Coach McGuirk'  an       1200
")
coach = read.table(textConnection(Input),header=TRUE)
0
q
coach = read.table(textConnection(Input),header=TRUE)
rm(Input)
names(coach)
table(coach$Instructor)
names(coach) <- tolower(names(coach))
tt_coach <- t.test(instructor ~ sodium, # the nominal variable with two options
data =coach,    # the measurement or scalar variable
alternative = "two.sided",
conf.level = 0.95)
levels(coach$instructor)
tt_coach <- t.test(instructor ~ sodium, # the nominal variable with two options
data =coach,    # the measurement or scalar variable
alternative = "two.sided",
conf.level = 0.95)
library(FSA)
Summarize(sodium ~ instructor,
data = coach,
digits = 3)
Brendon = Data$Sodium[Data$Instructor == "Brendon Small"]
McGuirk = Data$Sodium[Data$Instructor == "Coach McGuirk"]
library(rcompanion)
plotNormalHistogram(Brendon)
plotNormalHistogram(McGuirk, right = FALSE)
Brendon = coach$sodium[data$instructor == "Brendon Small"]
coach
names(coach)
Brendon = coach$sodium[coach$instructor == "Brendon Small"]
McGuirk = coach$sodium[coach$instructor == "Coach McGuirk"]
library(rcompanion)
plotNormalHistogram(Brendon)
plotNormalHistogram(McGuirk, right = FALSE)
library(lattice)
histogram(~ sodium | instructor,
data = coach,
type = "density",
layout = c(1, 2))
panel.mathdensity(dmath = dnorm,
col = "blue",
lwd = 2,
args = list(mean = mean(x),
sd = sd(x)), ...)})
histogram(~ sodium | instructor,
data = coach,
type   = "density",
layout = c(1,2), ### columns and rows of individual plots
panel = function(x, ...) {
panel.histogram(x, ...)
panel.mathdensity(dmath = dnorm,
col   = "blue",
lwd   = 2,
args  = list(mean=mean(x),
sd=sd(x)), ...)})
boxplot(sodium ~ instructor, data = coach)
qqnorm(sodium ~ instructor, data = coach)
library(lsr)
(coach_d <- cohensD(sodium ~ coach, data = ht, method  = "unequal"))
(coach_d <- cohensD(sodium ~ coach, data = coach, method  = "unequal"))
(coach_d <- cohensD(coach ~ sodium, data = coach, method  = "unequal"))
(ht_d <- cohensD(inches ~ section, data = ht, method  = "unequal"))
this_Input =("
Group Value
2pm    69
2pm    70
2pm    66
2pm    63
2pm    68
2pm    70
2pm    69
2pm    67
2pm    62
2pm    63
2pm    76
2pm    59
2pm    62
2pm    75
2pm    62
2pm    72
2pm    63
5pm    68
5pm    62
5pm    67
5pm    68
5pm    69
5pm    67
5pm    61
5pm    59
5pm    62
5pm    61
5pm    69
5pm    66
5pm    62
5pm    61
5pm    70
")
ht = read.table(textConnection(this_Input),header=TRUE)
names(ht) <- c("section", "inches")
(ht_d <- cohensD(inches ~ section, data = ht, method  = "unequal"))
(coach_d <- cohensD(sodium ~ coach, data - coach)
)
(coach_d <- cohensD(sodium ~ coach, data = coach)
)
(coach_d <- cohensD(sodium ~ coach, data = coach))
(coach_d <- cohensD(sodium ~ instructor, data = coach))
library(lsr)
(ht_d <- cohensD(inches ~ section, data = ht, method  = "unequal"))
(coach_d <- cohensD(sodium ~ instructor, data = coach))
coach_d
question("What would you say the effect size is between sodium levels based on the rule of thumb above?",
answer("Small", correct = TRUE),
answer("Medium"),
answer("Large"),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 1: setup
options(digits = 3, scipen = 9999)
if(!require(learnr)){install.packages("learnr")}
library(learnr)
this_Input =("
Group Value
2pm    69
2pm    70
2pm    66
2pm    63
2pm    68
2pm    70
2pm    69
2pm    67
2pm    62
2pm    63
2pm    76
2pm    59
2pm    62
2pm    75
2pm    62
2pm    72
2pm    63
5pm    68
5pm    62
5pm    67
5pm    68
5pm    69
5pm    67
5pm    61
5pm    59
5pm    62
5pm    61
5pm    69
5pm    66
5pm    62
5pm    61
5pm    70
")
ht = read.table(textConnection(this_Input),header=TRUE)
names(ht) <- c("section", "inches")
tt_height <- t.test(inches ~ section,
data =ht,
var.equal = TRUE,
conf.level = 0.95)
p_height <- round(tt_height$p.value, 2)
library(lsr)
ht_d <- cohensD(inches ~ section, data = ht, method  = "unequal")
# Chunk 2: a
question("What other test does the two-sample _t_ test NOT resemble?",
answer("a one-sample _t_ test"),
answer("a one-way ANOVA with only two categories"),
answer("a paired _t_ test"),
answer("a linear regression model", correct = TRUE),
allow_retry = TRUE,
random_answer_order = TRUE
)
# Chunk 3: bb
question("Which are examples of 1-sided null hypotheses?",
answer("It usually takes you less time than it takes me to make pie dough", correct = TRUE),
answer("The average monthly electric bill in Philadelphia, PA is different from the average monthly electric bill in Burlington, VT"),
answer("The average monthly electric bill in Philadelphia, PA is less than what it is in Burlington, VT", correct = TRUE),
answer("The average monthly electric bill in Philadelphia, PA is more than what it is in Burlington, VT", correct = TRUE),
allow_retry = TRUE,
random_answer_order = TRUE
)
# Chunk 4: two-vars
question("What are the two variables?",
answer("right hands and left hands"),
answer("hand size and type of person (politician vs. lumberjack)"),
answer("hand size and hand type (left vs. right)", correct = TRUE),
allow_retry = TRUE,
random_answer_order = TRUE
)
# Chunk 5: heightnames
# Chunk 6: heightnames-solution
head(ht)
# Chunk 7: aa
question("What might have been one of Student's favorite pasttimes?",
answer("Drinking beer", correct = TRUE),
answer("Working as a hairdresser"),
answer("Flying to Jupiter's moons"),
answer("Going to school full time"),
allow_retry = TRUE
)
# Chunk 8: bad_distributions
question("Which of the following situations needs to be true for the same data set to result in too many false positives from a two-sample _t_ test? (Please select ALL that apply)",
answer("A very small sample size", correct = TRUE),
answer("A flat distribution in one group", correct = TRUE),
answer("A bimodal distribution in one group", correct = TRUE),
allow_retry = TRUE,
random_answer_order = TRUE
)
# Chunk 9: tt_perfect_storm
question("Which of the following is NOT a necessary aspect of a distribution that will cause a _t_ test to result in too many false positives?",
answer("Small sample size"),
answer("Non-normality"),
answer("Two groups with skewness in opposite directions"),
answer("Both negative and positive numbers", correct = TRUE),
allow_retry = TRUE,
random_answer_order = TRUE
)
# Chunk 10: tt_tf_assumptions
question("True or false: You can usually still perform a reliable _t_ test if only two out of three of the conditions in the previous question have been met.",
answer("TRUE", correct = TRUE),
answer("FALSE"),
allow_retry = TRUE,
random_answer_order = TRUE
)
# Chunk 11: unbalanced
question("What can cause a two-sample _t_ test to become more sensitive to the assumption of homoscedasticity?",
answer("Heteroscedasticity"),
answer("A very small sample (< 10 or so) and unequal sample sizes in the two groups", correct = TRUE),
answer("Skewness in the data"),
answer("Unequal sample sizes in the two groups"),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 12: belch_for_welches
question("What should you do if your two groups have standard deviations that are substantially different AND your sample sizes are small OR unequal",
answer("Drink Welch's grape juice"),
answer("Perform a squelch test instead of a _t_ test"),
answer("Use linear regression instead of a _t_ test"),
answer("Perform a Welch's _t_ test instead of the regular two-sample _t_ test", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 13: to_skip_or_not_to_skip
question("What do you want to do?",
answer("Skip to 'Perform the Analysis'"),
answer("Find out how to do ethical research and set myself up for success", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 14: prepare-coach_ttest
Input = ("
Instructor       Student  Sodium
'Brendon Small'  a        1200
'Brendon Small'  b        1400
'Brendon Small'  c        1350
'Brendon Small'  d         950
'Brendon Small'  e        1400
'Brendon Small'  f        1150
'Brendon Small'  g        1300
'Brendon Small'  h        1325
'Brendon Small'  i        1425
'Brendon Small'  j        1500
'Brendon Small'  k        1250
'Brendon Small'  l        1150
'Brendon Small'  m         950
'Brendon Small'  n        1150
'Brendon Small'  o        1600
'Brendon Small'  p        1300
'Brendon Small'  q        1050
'Brendon Small'  r        1300
'Brendon Small'  s        1700
'Brendon Small'  t        1300
'Coach McGuirk'  u        1100
'Coach McGuirk'  v        1200
'Coach McGuirk'  w        1250
'Coach McGuirk'  x        1050
'Coach McGuirk'  y        1200
'Coach McGuirk'  z        1250
'Coach McGuirk'  aa       1350
'Coach McGuirk'  ab       1350
'Coach McGuirk'  ac       1325
'Coach McGuirk'  ad       1525
'Coach McGuirk'  ae       1225
'Coach McGuirk'  af       1125
'Coach McGuirk'  ag       1000
'Coach McGuirk'  ah       1125
'Coach McGuirk'  ai       1400
'Coach McGuirk'  aj       1200
'Coach McGuirk'  ak       1150
'Coach McGuirk'  al       1400
'Coach McGuirk'  am       1500
'Coach McGuirk'  an       1200
")
coach = read.table(textConnection(Input),header=TRUE)
rm(Input)
names(coach) <- tolower(names(coach))
# Chunk 15: coach-summary
# Chunk 16: coach-summary-solution
library(FSA)
Summarize(sodium ~ instructor,
data = coach,
digits = 3)
# Chunk 17: coach-hist
# Chunk 18: coach-hist-solution
Brendon = coach$sodium[coach$instructor == "Brendon Small"]
McGuirk = coach$sodium[coach$instructor == "Coach McGuirk"]
library(rcompanion)
plotNormalHistogram(Brendon)
plotNormalHistogram(McGuirk, right = FALSE)
# Chunk 19: lattice-hists
# Chunk 20: lattice-hists-solution
library(lattice)
histogram(~ sodium | instructor,
data = coach,
type = "density",
layout = c(1, 2))
# Chunk 21: lattice-normal-curves
# Chunk 22: lattice-normal-curves-solution
library(lattice)
histogram(~ sodium | instructor,
data = coach,
type   = "density",
layout = c(1,2), ### columns and rows of individual plots
panel = function(x, ...) {
panel.histogram(x, ...)
panel.mathdensity(dmath = dnorm,
col   = "blue",
lwd   = 2,
args  = list(mean=mean(x),
sd=sd(x)), ...)})
# Chunk 23: box-coach
# Chunk 24: box-coach-solution
boxplot(sodium ~ instructor, data = coach)
# Chunk 25: coach-cohen
# Chunk 26: coach-cohen-solution
library(lsr)
(ht_d <- cohensD(inches ~ section, data = ht, method  = "unequal"))
(coach_d <- cohensD(sodium ~ instructor, data = coach))
# Chunk 27: ht_d_lookat
# Chunk 28: ht_d_lookat-solution
ht_d
coach_d
# Chunk 29: ht-effect-size
question("What would you say the effect size is between heights based on the rule of thumb above?",
answer("Small"),
answer("Medium", correct = TRUE),
answer("Large"),
random_answer_order = TRUE,
allow_retry = TRUE
)
question("What would you say the effect size is between sodium levels based on the rule of thumb above?",
answer("Small", correct = TRUE),
answer("Medium"),
answer("Large"),
random_answer_order = TRUE,
allow_retry = TRUE
)
library(pwr)
ht
summarize(inches ~ section, data = ht)
Summarize(inches ~ section)
Summarize(inches ~ section, data = ht)
library(pwr)
Summarize(inches ~ section, data = ht)
pwr.2p2n.test(h = ht_d,
n1 = 18,
n2 = 16,
sig.level = .05,
power = NULL,
alternative = "two.sided")
Summarize(sodium ~ instructor, data = coach)
library(pwr)
Summarize(sodium ~ instructor, data = coach)
pwr.2p2n.test(h = ht_d,
n1 = 20,
n2 = 20,
sig.level = .05,
power = NULL,
alternative = "two.sided")
pwr.2p2n.test(h = ht_d,
n1 = NULL,
n2 = NULL,
sig.level = .05,
power = .80,
alternative = "two.sided")
pwr.2p2n.test(h = ht_d,
n1 = 40,
n2 = NULL,
sig.level = .05,
power = .80,
alternative = "two.sided")
pwr.2p2n.test(h = ht_d,
n1 = 1000,
n2 = NULL,
sig.level = .05,
power = .80,
alternative = "two.sided")
pwr.2p2n.test(h = ht_d,
n1 = 80,
n2 = NULL,
sig.level = .05,
power = .80,
alternative = "two.sided")
pwr.2p2n.test(h = ht_d,
n1 = 77,
n2 = NULL,
sig.level = .05,
power = .80,
alternative = "two.sided")
pwr.2p2n.test(h = ht_d,
n1 = 78,
n2 = NULL,
sig.level = .05,
power = .80,
alternative = "two.sided")
pwr.2p2n.test(h = ht_d,
n1 = 79,
n2 = NULL,
sig.level = .05,
power = .80,
alternative = "two.sided")
t.test(inches ~ section, # the nominal variable with two options
data =ht,    # the measurement or scalar variable
alternative = "two.sided",
conf.level = 0.95)
tt_height <- t.test(inches ~ section,
data =ht,
var.equal = TRUE,
conf.level = 0.95)
p_height <- round(tt_height$p.value, 2)
tt_height <- t.test(inches ~ section, # the nominal variable with two options
data =ht,    # the measurement or scalar variable
alternative = "two.sided",
conf.level = 0.95)
str(tt_height)
coach_d <- cohensD(sodium ~ instructor, data = coach)
p_height <- round(tt_height$p.value, 2)
