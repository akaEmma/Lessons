slice(1) %>%
ungroup)
df$date_diff <- abs(df$date_lang - df$date_math)
closest_pairs <- as_tibble(df %>%
group_by(id) %>%
filter(date_diff == min(date_diff)) %>%
slice(1) %>%
ungroup)
names(closest_pairs)
library(learnr)
library(data.table)
library(dplyr)
library(pwr)
library(tidyr)
library(stats)
library(ggplot2)
library(sortable)
shhh <- suppressPackageStartupMessages
shh <- suppressWarnings
sh <- suppressMessages
knitr::opts_chunk$set(echo = FALSE)
options(digits = 3, scipen = 9999)
tutorial_options(exercise.completion = FALSE,
exercise.eval = TRUE,
exercise.lines = 8,
exercise.diagnostics = TRUE)
############################### Data for this lesson ###########################################
math <- read.csv("https://raw.githubusercontent.com/pm0kjp/datastore/master/fakeMath.csv")
lang <- read.csv("https://raw.githubusercontent.com/pm0kjp/datastore/master/fakeLang.csv")
mathr <- rename(.data = math, id = subjectID, date = testDate, score = mathScore)
langr <- rename(.data = lang, id = subjectID, date = testDate, score = languageScore)
df <- merge(mathr, langr, by = "id", suffixes = c("_math", "_lang"))
earliest_math <- as_tibble(merge(x = mathr,
y = langr,
by = "id",
all.x = TRUE,
suffixes = c("_math", "_lang")))
df$date_diff <- abs(df$date_lang - df$date_math)
closest_pairs <- as_tibble(df %>%
group_by(id) %>%
filter(date_diff == min(date_diff)) %>%
slice(1) %>%
ungroup)
first_math_maybe_language <- as_tibble(earliest_math %>%
group_by(id) %>%
filter(earliest == min(abs(date_lang - date_math)) |
is.na(date_lang - date_math)) %>%
slice(1) %>%
ungroup)
df$date_math <- as.Date(df$date_math)
df$date_lang <- as.Date(df$date_lang)
names(df)
dim(closest_pairs)
closest_pairs <- as_tibble(df %>%
group_by(id) %>%
filter(date_diff == min(date_diff)) %>%
slice(1) %>%
ungroup)
dim(closest_pairs)
f %>%
+         group_by(id) %>%
+         filter(date_diff == min(date_diff)) %>%
+         slice(1) %>%
+         ungroup
df %>%
+         group_by(id) %>%
+         filter(date_diff == min(date_diff)) %>%
+         slice(1) %>%
+         ungroup
df %>%
group_by(id) %>%
filter(date_diff == min(date_diff)) %>%
slice(1) %>%
ungroup
df
as_tibble(df)
df <- merge(mathr, langr, by = "id", suffixes = c("_math", "_lang"))
df$date_diff <- abs(df$date_lang - df$date_math)
df
df$date_diff <- abs(as.Date(df$date_lang) - as.Date(df$date_math))
df$date_diff
closest_pairs <- as_tibble(df %>%
group_by(id) %>%
filter(date_diff == min(date_diff)) %>%
slice(1) %>%
ungroup)
dim(closest_pairs)
earliest_math <- as_tibble(merge(x = mathr,
y = langr,
by = "id",
all.x = TRUE,
suffixes = c("_math", "_lang")))
names(earliest_math)
first_math_maybe_language <- as_tibble(earliest_math %>%
group_by(id) %>%
filter(abs(date_lang - date_math)
== min(abs(date_lang - date_math)) |
is.na(date_lang - date_math)) %>%
slice(1) %>%
ungroup)
library(learnr)
tutorial.options(exercise.completion = TRUE)
library(learnr)
library(data.table)
library(dplyr)
library(pwr)
library(tidyr)
library(stats)
library(ggplot2)
library(sortable)
shhh <- suppressPackageStartupMessages
shh <- suppressWarnings
sh <- suppressMessages
knitr::opts_chunk$set(echo = FALSE)
options(digits = 3, scipen = 9999)
tutorial_options(exercise.startover = TRUE,
exercise.eval = TRUE,
exercise.cap = "R Code",
exercise.completion = TRUE,
exercise.diagnostics = TRUE)
########################### Setup for this lesson #######################################
# download Joy's scores data
math <- read.csv("https://raw.githubusercontent.com/pm0kjp/datastore/master/fakeMath.csv")
lang <- read.csv("https://raw.githubusercontent.com/pm0kjp/datastore/master/fakeLang.csv")
# play around with it a bit.
mathr <- rename(.data = math, id = subjectID, date = testDate, score = mathScore)
langr <- rename(.data = lang, id = subjectID, date = testDate, score = languageScore)
new_math <- mathr %>% mutate(subject = "Math")
new_lang <- langr %>% mutate(subject = "Language")
df <- merge(new_math, new_lang, all = TRUE)
scores <- as_tibble(df)
scores$date <- as.Date(scores$date)
scores$id <- factor(scores$id)
scores$subject <- factor(scores$subject)
knitr::include_graphics("www/everything.png",
auto_pdf = getOption("knitr.graphics.auto_pdf",
FALSE), dpi = NULL)
knitr::include_graphics("www/terminal.png",
auto_pdf = getOption("knitr.graphics.auto_pdf",
FALSE), dpi = NULL)
library(tidyverse)
library(fortunes)
install.packages(fortunes)
install.packages("fortunes")
fortunes()
library(fortunes)
?fortunes
read.fortunes(0)
read.fortunes()
read.fortunes(25)
?read.fortunes
fortune("Ripley")
fortune(author = "Ripley")
library(devtools)
devtools::install_github("https://github.com/zoews/learnr")
?learnr
??learnr
library(learnr)
install_local("/Users/braunsb/Documents/GitHub/learnr_0.10.0.9000.tar.gz")
library(learnr)
library(devtools)
build()
library(learnr)
roxygenise("/Users/braunsb/Documents/GitHub/learnr")
library(roxygen2)
roxygen2::roxygenise("/Users/braunsb/Documents/GitHub/learnr")
library(learnr)
??learnr
devtools::install_github("https://github.com/zoews/learnr")
library(learnr)
learnr::run_tutorial("python", package = "learnr")
devtools::install_github("zoews/learnr")
library(learnr)
learnr::run_tutorial("python", package = "learnr")
install.packages("reticulate")
library(learnr)
learnr::run_tutorial("python", package = "learnr")
Y
n
dbDisconnect()
learnr::run_tutorial("python", package = "learnr")
devtools::install_github("rstudio-education/gradethis")
?gradethis
??gradethis
library(gradethis)
random_praise()
library(gradethis)
question("What are the odds of getting heads when you flip a fair coin one time?",
answer("1", message = "That would mean you would get heads every single time."),
answer(".50", correct = TRUE),
answer("1/2", correct = TRUE),
answer("5%", message = "Perhaps you confuse odds with alpha?"),
correct = "You are amazing!",
incorrect = "No.",
random_answer_order = TRUE,
allow_retry = TRUE
)
options(digits = 3, scipen = 9999)
if(!require(learnr)){install.packages("learnr")}
library(learnr)
library(dplyr)
library(tidyr)
tutorial_options(exercise.completion = FALSE,
exercise.eval = TRUE,
exercise.lines = 8,
exercise.diagnostics = TRUE)
question("What are the odds of getting heads when you flip a fair coin one time?",
answer("1", message = "That would mean you would get heads every single time."),
answer(".50", correct = TRUE),
answer("1/2", correct = TRUE),
answer("5%", message = "Perhaps you confuse odds with alpha?"),
correct = "You are amazing!",
incorrect = "No.",
random_answer_order = TRUE,
allow_retry = TRUE
)
question("I have another fair 2-sided coin and I am going to flip it. What are my odds of getting heads?",
answer(".50", correct = TRUE),
answer("1", message = "That would mean you would get heads every single time, which would indicate we don't have a fair coin."),
answer(".25", message = "Twenty-five percent means you get heads way less than half the time, which means, that we don't have a fair coin."),
correct = "Yes!",
incorrect = "The odds of 1:1, which is half.",
random_answer_order = TRUE,
allow_retry = TRUE
)
question("I have another fair 2-sided coin and I am going to flip it. What are my odds of getting heads?",
answer(".50", correct = TRUE),
answer("1/2", correct = TRUE),
answer("1", message = "That would mean you would get heads every single time, which would indicate we don't have a fair coin."),
answer(".25", message = "Twenty-five percent means you get heads way less than half the time, which means, that we don't have a fair coin."),
correct = "Yes!",
incorrect = "The odds are 1:1, which is half.",
random_answer_order = TRUE,
allow_retry = TRUE
)
question("I'm going to flip the same coin again. What are the odds of getting heads again?",
answer("1", correct = TRUE),
answer(".50"),
answer("1/2"),
answer(".25"),
correct = "correct_feedback",
incorrect = "As we proceed, the odds of getting a string of, say, n heads, gets smaller. Halve teh previous odds to get the correct answer.",
random_answer_order = TRUE,
allow_retry = TRUE
)
question("I'm going to flip the same coin again. What are the odds of getting heads again?",
answer("1", correct = TRUE),
answer(".25"),
answer(".50"),
answer("None of these (except this one)", correct = TRUE),
correct = "Well done!",
incorrect = "The odds are no half what they were last time, or .25/2. Try that.",
random_answer_order = TRUE,
allow_retry = TRUE
)
question("We have again cut our odds in half, so the answer to the previous question is .125. Why have we cut our odds in half at each step so far?",
answer("because we have enough data to estimate new odds", correct = TRUE),
answer("because I definitely have an unfair coin"),
correct = "Yay!",
incorrect = "'Definitely' is a strong word. Go with the less definitive answer.",
random_answer_order = TRUE,
allow_retry = TRUE
)
12.5/2
.125/2
question("How likely is it that I get yet another in the string of heads?",
answer(".03125", correct = TRUE),
answer(".05", message = "message_wrong_1"),
answer("0", message = "message_wrong_2"),
answer(".0625/2", correct = "TRUE"),
correct = "Yes, that's right",
incorrect = "There are two correct answers.",
random_answer_order = TRUE,
allow_retry = TRUE
)
2/6
1/2
x <- 1/2
x <- x/2
(x <- x/2)
??feedback
random_praise()
learnr::available_tutorials
learnr::available_tutorials()
run_tutorial(gradethis)
run_tutorial("gradethis")
run_tutorial(name = "gradethis")
run_tutorial(name = "grading-dem", package = "gradethis")
run_tutorial(name = "grading-demo", package = "gradethis")
1 + 3
random_praise()
emdash()
em_dash()
1/6
question_text(
"What is the formula for figuring out the probability of rolling a 2 AND a 3 in a single roll of a fair die?",
answer("0/6", correct = TRUE),
answer("0 / 6", correct = TRUE),
answer("2/6", message = "How many ways is it possible to get both a 2 AND a 3 at the same time with one die?"),
answer("2 / 6", message = "There are not 2 ways to get both a 2 AND a 3 at the same time with one die."),
answer("1/6", message = "There are not any ways to get both a 2 AND a 3 at the same time with one die."),
correct = "Perfect!",
incorrect = "Incorrect",
allow_retry = TRUE
)
# Chunk 1: setup
options(digits = 3, scipen = 9999)
if(!require(learnr)){install.packages("learnr")}
library(learnr)
library(dplyr)
library(tidyr)
tutorial_options(exercise.completion = FALSE,
exercise.eval = TRUE,
exercise.lines = 8,
exercise.diagnostics = TRUE)
# Chunk 2: whataretheodds
question("What are the odds of getting heads when you flip a fair coin one time?",
answer("1", message = "That would mean you would get heads every single time, which would indicate we don't have a fair coin."),
answer(".50", correct = TRUE),
answer("1/2", correct = TRUE),
answer("5%", message = "Five percent means you get heads way less than half the time, which means, that we don't have a fair coin."),
correct = "You are amazing!",
incorrect = "There are two correct answers.",
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 3: i-have-another-one
question(" What are my odds of getting heads?",
answer(".50", correct = TRUE),
answer("1/2", correct = TRUE),
answer("1", message = "That would mean you would get heads every single time, which would indicate we don't have a fair coin."),
answer(".25", message = "Twenty-five percent means you get heads way less than half the time, which means, that we don't have a fair coin."),
correct = "Yes!",
incorrect = "The odds are 1:1, which is half. Make sure you've checked off all the answers that mean half.",
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 4: and-again
question("I'm going to flip the same coin again. What are the odds of getting heads again?",
answer("1"),
answer(".50"),
answer("1/2"),
answer(".25", correct = TRUE),
correct = "Correct. Superb work!",
incorrect = "As we proceed, the odds of getting a string of, say, n heads, gets smaller. Halve the previous odds to get the correct answer.",
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 5: headsagainornot
question("I'm going to flip the same coin again. What are the odds of getting heads again?",
answer("1"),
answer(".25"),
answer(".50"),
answer("None of these (except this one)", correct = TRUE),
correct = "Well done!",
incorrect = "The odds are no half what they were last time, or .25/2. Try that.",
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 6: whyinhalf
question("Why have we cut our odds in half at each step so far?",
answer("because we have enough data to estimate new odds", correct = TRUE),
answer("because I definitely have an unfair coin"),
correct = "Yay!",
incorrect = "'Definitely' is a strong word. Go with the less definitive answer.",
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 7: whatwertheodds
question("What were the odds that I would get heads for the third flip?",
answer(".125", correct = TRUE),
answer(".0613", message = "You're getting ahead of the rest of us"),
answer(".0306", message = "That is close to the odds for a future flip, but not the third flip."),
answer("1", message = "That would mean it is 100% likely to get heads next flip. If you think that, then you have decided this is an unfair coin."),
correct = "Correct. Smashing!",
incorrect = "No. You could go back to the previous page to find out.",
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 8: isthisapvalue
question("These odds that we have been calculating, are they possibly the equivalent of a _p_ value?",
answer("Yes.", correct = TRUE),
answer("No", message = "message_wrong_1"),
correct = "Exactly so.",
incorrect = "Yes. Yes they are. Cool, huh?",
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 9: testingthis
question_text(
"What is the formula for cacluating my odds of getting a fifth heads?",
answer(".125 / 2", correct = TRUE),
answer(".125/2", correct = TRUE),
answer(".0625", message = "That's the answer, not the formula for arriving at the answer."),
answer("1", message = "This would be correct if you believe I was either cheating or using an unfair coin."),
correct = "Cool job!",
incorrect = "No.",
allow_retry = TRUE
)
# Chunk 10: onelasttime
question("How likely is it that I get yet another in the string of heads?",
answer(".03125", correct = TRUE),
answer(".05", message = "Not even close"),
answer("0", message = "Hmm. Interesting response."),
answer(".0625/2", correct = TRUE),
correct = "Yes, that's right",
incorrect = "Take the previous answer and divide it in two. There are two correct answers.",
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 11: testingthat
question_text(
"With a fair die, what is the formula for calculating the probability of rolling a 3 or a 4?",
answer(".333", message = "That's the answer, not the formula for arriving at the answer."),
answer(".33", message = "That's the answer, not the formula for arriving at the answer."),
answer("3/6", message = "There are only 2 possibilities, not 3."),
answer("6/2", message = "That's upside down."),
answer("2/6", correct = TRUE),
answer("1", message = "Remember, the forumla you need is the number of possibilities that meet your condition—here 2—divided by the number of equally likely possibilities—here 6."),
correct = "Well done!",
incorrect = "No.",
allow_retry = TRUE
)
question_text(
"What is the formula for figuring out the probability of rolling a 2 AND a 3 in a single roll of a fair die?",
answer("0/6", correct = TRUE),
answer("0 / 6", correct = TRUE),
answer("2/6", message = "How many ways is it possible to get both a 2 AND a 3 at the same time with one die?"),
answer("2 / 6", message = "There are not 2 ways to get both a 2 AND a 3 at the same time with one die."),
answer("1/6", message = "There are not any ways to get both a 2 AND a 3 at the same time with one die."),
correct = "Perfect!",
incorrect = "Incorrect",
allow_retry = TRUE
)
question_text(
"What is the formula for figuring out the probability of rolling a 2 AND a 3 in a single roll of a fair die?",
answer("0/6", correct = TRUE),
answer("0 / 6", correct = TRUE),
answer("2/6"),
answer("2 / 6"),
answer("1/6"),
correct = "Perfect!",
incorrect = "The number of possibilities that meet your condition is 0. The number of equally likely outcomes is still 6.",
allow_retry = TRUE
)
question("'Luck is my middle name,' said Rincewind, indistinctly. 'Mind you, my first name is Bad.",
answer("Neil Gaiman", correct = TRUE),
answer("Douglas Adams"),
answer("Terry Pratchett"),
answer("Eoin Colfer"),
correct = "You got it! Want to join my reading group?",
incorrect = "Nope. Here is a hing: The book was *Equal Rites*.",
random_answer_order = TRUE,
allow_retry = TRUE
)
question("What is the probability of a lellow object falling out of the bag first?",
answer("12/29", correct = TRUE),
answer("There is no such thing as 'lellow'"),
answer("5/29"),
answer("1"),
correct = "Awesome!",
incorrect = "The probability of a lellow object being the first to come out of the bag is the number of lellows DIVIDED BY the total number of objects in the bag.",
incorrect = "incorrect_feedback",
random_answer_order = TRUE,
allow_retry = TRUE
)
knitr::include_graphics("www/three-graphs.png",
auto_pdf = getOption("knitr.graphics.auto_pdf",
FALSE), dpi = NULL)
install.packages(c("bdsmatrix", "BH", "bibtex", "bit", "bookdown", "caret", "caTools", "DescTools", "deSolve", "DiagrammeR", "farver", "fpc", "future", "future.apply", "ggridges", "gplots", "gsl", "hms", "insight", "knitr", "leaps", "maxLik", "mlr", "ModelMetrics", "multcomp", "mvtnorm", "odbc", "origami", "parameters", "prabclus", "prettyunits", "pROC", "psych", "ranger", "RcmdrMisc", "rcompanion", "RCurl", "recipes", "robCompositions", "rocqi", "rrcov", "RSQLite", "shinyjs", "sjlabelled", "sjmisc", "SQUAREM", "statmod", "stringi", "swirl", "tigris", "tinytex", "trend", "V8", "vcd", "xfun", "XML", "zoo"))
?data.table
more_of_mydata <- rnorm(1, 10, 100)
more_of_mydata
more_of_mydata <- rnorm(10, 10, 100)
more_of_mydata
mean(more_of_mydata)
more_of_mydata <- rnorm(10, 12, 100)
more_of_mydata
mean(more_of_mydata)
more_of_mydata <- rnorm(0, .25, 100)
more_of_mydata
more_of_mydata <- rnorm(100, .25, 100)
more_of_mydata
sd(more_of_mydata)
?rnorm
more_of_mydata <- rnorm(100, 50, 2)
more_of_mydata
sd(more_of_mydata)
mean(more_of_mydata)
the_last_of_mydata <- rnorm(100, 50, 3)
df <- cbind(more_of_mydata, the_last_of_mydata)
df
mydata <- c(1, 2, 3, 4:100) # your data will probably be somewhat larger.
mydata
df <- cbind(mydata, more_of_mydata, the_last_of_mydata)
df
getwd()
??fork
example(fork)
.0325/2
.5/2
1 / 2 / 2 / 2
1 / 2 / 2 / 2 / 2
1 / 2 / 2 / 2 / 2 / 2
1 / 2 / 2 / 2 / 2
1 / 2 / 2
1 / 2 / 2 / 2
1 / 2 / 2 / 2 / 2
1 / 2 / 2 / 2 / 2 / 2
1 / 2 / 2 /2
1 / 2 /2 /2/2
1 /2/2/2/2/2
