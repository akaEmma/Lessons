answer("Skip to 'Perform the Analysis'"),
answer("Find out how to do ethical research and set myself up for success", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 51: gvlma_egg
# Chunk 52: gvlma_egg-solution
summary(gvlma(egg_fit))
plot(gvlma(egg_fit))
# Chunk 53: div_fit_gvlma
# Chunk 54: div_fit_gvlma-solution
summary(gvlma(diverse_fit))
plot(gvlma(diverse_fit))
# Chunk 55: which_model_meets_assumptions
question("Which of the two models passes all necessary assumptions for linear regression?",
answer("`egg_fit`"),
answer("`diverse_fit`", correct = TRUE),
answer("A model airplane"),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 56: pwr-correlation
# Chunk 57: pwr-correlation-solution
library(pwr)
pwr.r.test(n = NULL,
r = 0.500,
sig.level = 0.05,
power = 0.80,
alternative = "two.sided")
# Chunk 58: how_many_egg
# Chunk 59: how_many_egg-solution
nrow(egg)
# Chunk 60: egg_fit_again
# Chunk 61: egg_fit_again-solution
egg_fit <- lm(Eggs ~ Weight, data = egg)
summary(egg_fit)
# Chunk 62: anova-best-fit
# Chunk 63: anova-best-fit-solution
anova(egg_fit)
# Chunk 64: object_appearance
# Chunk 65: object_appearance-solution
str(egg_fit)
str(coregg)
# Chunk 66: access_method
# Chunk 67: access_method-solution
names(egg_fit)
names(coregg)
# Chunk 68: all-names-together
# Chunk 69: all-names-together-solution
names(c(egg_fit, coregg))
# Chunk 70: egg_fit-coefficients
# Chunk 71: egg_fit-coefficients-solution
egg_fit$coefficients
# Chunk 72: residuals
# Chunk 73: residuals-solution
egg_fit$residuals
# Chunk 74: hist-resids
# Chunk 75: hist-resids-solution
qqnorm(egg_fit$residuals)
qqline(egg_fit$residuals, col = "red")
# Chunk 76: one-more
# Chunk 77: one-more-solution
(egg_ass <- gvlma(egg_fit))
# Chunk 78: hist-skewness
# Chunk 79: hist-skewness-solution
hist(egg_ass$residuals)
# Chunk 80: label
# Chunk 81: label-solution
egg$ln_Weight <- log(egg$Weight)
ln_egg_fit <- lm(Eggs ~ ln_Weight, data = egg)
gvlma(ln_egg_fit)
# Chunk 82: logged_ass
question("Are all assumptions satisfied now?",
answer("Yes", correct = TRUE),
answer("No"),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 83: log-egg-fit-effects
# Chunk 84: log-egg-fit-effects-solution
ln_egg_fit$effects
ln_egg_fit$rank
names(summary(ln_egg_fit))
names(c(summary(egg_fit), coregg))
egg_fit$call
egg_fit$terms
names(c(summary(egg_fit), coregg))
ln_egg_fit$coefficients
egg_fit$coefficients
question("What is _b_ in the best fit line formula with ln_Weight as the predictor?",
answer("4.63"),
answer("9.96", correct = TRUE),
answer("9.074"),
answer("1.6"),
random_answer_order = TRUE,
allow_retry = TRUE
)
summary(ln_egg_fit)$coefficients
qqnorm(summary(egg_fit)$residuals)
qqline(summary(egg_fit)$residuals, col = "red")
summary(ln_egg_fit)$aliased
summary(ln_egg_fit)$sigma
sd(c(4.63, 9.96))
sef <- summary(egg_fit)
slef <- summary(ln_egg_fit)
sef$terms
qqnorm(sef$residuals)
qqline(sef$residuals, col = "red")
(egg_ass <- gvlma(egg_fit))
hist(egg_ass$residuals)
egg$ln_Weight <- log(egg$Weight)
ln_egg_fit <- lm(Eggs ~ ln_Weight, data = egg)
gvlma(ln_egg_fit)
summary(ln_egg_fit)$coefficients
slef$coefficients
slef$aliased
slef <- summary(ln_egg_fit)
slef$coefficients
slef$aliased
slef$sigma
names(slef)
slef$coefficients
slef$coefficients[1]
slef$coefficients[2]
slef$coefficients[1:2]
sd(slef$coefficients[1:2])
slef$sigma
round(sd(slef$coefficients), 2)
round(sd(slef$coefficients), 1)
round(sd(slef$coefficients[1:2]), 1)
identical(round(sd(slef$coefficients[1:2]), 1), slef$sigma)
round(sd(slef$coefficients[1:2]), 1)
sd(c(4.63, 9.96))
slef$coefficients[1:2]
names(slef, coregg)
names(c(slef, coregg))
slef$df
library(learnr)
library(data.table)
library(dplyr)
load("https://storage.googleapis.com/public-braunsb-media/Arcus-Education-Assets/Lessons/flags.RData")
load("flags.Rdata")
flag_colors <- flags[, 11:17]
getwd()
load("~/Documents/GitHub/a-MESS Lessons/flags.RData")
library(dplyr)
library(kableExtra)
df <- data.frame(
Name = c("Adam", "Ben", "Charlie"),
Score = c(95, 97, 96),
Rank = c(3, 1, 2))
install.packages(kableExtra)
install.packages("kableExtra")
library(kableExtra)
df <- data.frame(
Name = c("Adam", "Ben", "Charlie"),
Score = c(95, 97, 96),
Rank = c(3, 1, 2))
df
df %>%
dplyr::mutate(Results = paste0(Score, " [", Rank, "]")) %>%
dplyr::select(Name, Results) %>%
kableExtra::kable() %>%
kableExtra::add_header_above(c(" " = 1, "Second header" = 1))
dfj
df
library(learnr)
library(data.table)
library(dplyr)
load("flags.Rdata")
getwd()
load("lapply-and-sapply/flags.Rdata")
load("~/Documents/GitHub/a-MESS Lessons/lapply-and-sapply/flags.RData")
getwd()
load("lapply-and-sapply/flags.csv")
flags <- read.csv("lapply-and-sapply/flags.csv")
flag_colors <- flags[, 11:17]
flag_shapes <- flags[, 19:23]
shape_mat <- sapply(flag_shapes, range)
unique_vals <- lapply(flags, unique)
knitr::opts_chunk$set(echo = FALSE)
flags <- read.csv("lapply-and-sapply/flags.csv")
getwd()
N <- nrow(flags)
flags <- read.csv("/Users/braunsb/Documents/GitHub/a-MESS Lessons/lapply-and-sapply/flags.csv")
flags
t(flags)
names(flags)
flags$Afghanistan
str(flags)
ex_fit <- lm(Speed ~ Pulse,
data = exercise)
# Chunk 1: setup
options(digits = 3, scipen = 9999)
if(!require(learnr)){install.packages("learnr")}
library(learnr)
if(!require(psych)){install.packages("psych")}
if(!require(gvlma)){install.packages("gvlma")}
if(!require(PerformanceAnalytics)){install.packages("PerformanceAnalytics")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(rcompanion)){install.packages("rcompanion")}
if(!require(pwr)){install.packages("pwr")}
### --------------------------------------------------------------
### Correlation and linear regression, species diversity example
### pp. 207â€“208 from Biostats Handbook
### --------------------------------------------------------------
Input = ("
Town                  State  Latitude  Species
'Bombay Hook'          DE     39.217    128
'Cape Henlopen'        DE     38.800    137
'Middletown'           DE     39.467    108
'Milford'              DE     38.958    118
'Rehoboth'             DE     38.600    135
'Seaford-Nanticoke'    DE     38.583     94
'Wilmington'           DE     39.733    113
'Crisfield'            MD     38.033    118
'Denton'               MD     38.900     96
'Elkton'               MD     39.533     98
'Lower Kent County'    MD     39.133    121
'Ocean City'           MD     38.317    152
'Salisbury'            MD     38.333    108
'S Dorchester County'  MD     38.367    118
'Cape Charles'         VA     37.200    157
'Chincoteague'         VA     37.967    125
'Wachapreague'         VA     37.667    114
")
diversity <- read.table(textConnection(Input), header = TRUE)
rm(Input)
Input = ("
Speed   Pulse
0       57
1.6     69
3.1     78
4       80
5       85
6       87
6.9     90
7.7     92
8.7     97
12.4    108
15.3    119
")
exercise <- read.table(textConnection(Input), header = TRUE)
rm(Input)
Input = ("
Weight  Eggs
5.38	29
7.36	23
6.13	22
4.75	20
8.10	25
8.62	25
6.30	17
7.44	24
7.26	20
7.17	27
7.78	24
6.23	21
5.42	22
7.87	22
5.25	23
7.37	35
8.01	27
4.92	23
7.03	25
6.45	24
5.06	19
6.72	21
7.00	20
9.39	33
6.49	17
6.34	21
6.16	25
5.74	22
")
egg <- read.table(textConnection(Input), header = TRUE)
rm(Input)
coramph <- cor.test(~ Species + Latitude,
data = diversity,
method = "pearson",
conf.level = 0.95)
coregg <- cor.test(~ Weight + Eggs,
data = egg,
method = "pearson",
conf.level = 0.95)
corex <- cor.test(~ Pulse + Speed,
data = exercise,
method = "pearson",
conf.level = 0.95)
(cordiv <- cor.test(~ Species + Latitude,
data = diversity,
method = "pearson",
conf.level = 0.95))
Input = ("
Instructor       Grade   Weight  Calories Sodium  Score
'Brendon Small'     6      43     2069    1287      77
'Brendon Small'     6      41     1990    1164      76
'Brendon Small'     6      40     1975    1177      76
'Brendon Small'     6      44     2116    1262      84
'Brendon Small'     6      45     2161    1271      86
'Brendon Small'     6      44     2091    1222      87
'Brendon Small'     6      48     2236    1377      90
'Brendon Small'     6      47     2198    1288      78
'Brendon Small'     6      46     2190    1284      89
'Jason Penopolis'   7      45     2134    1262      76
'Jason Penopolis'   7      45     2128    1281      80
'Jason Penopolis'   7      46     2190    1305      84
'Jason Penopolis'   7      43     2070    1199      68
'Jason Penopolis'   7      48     2266    1368      85
'Jason Penopolis'   7      47     2216    1340      76
'Jason Penopolis'   7      47     2203    1273      69
'Jason Penopolis'   7      43     2040    1277      86
'Jason Penopolis'   7      48     2248    1329      81
'Melissa Robins'    8      48     2265    1361      67
'Melissa Robins'    8      46     2184    1268      68
'Melissa Robins'    8      53     2441    1380      66
'Melissa Robins'    8      48     2234    1386      65
'Melissa Robins'    8      52     2403    1408      70
'Melissa Robins'    8      53     2438    1380      83
'Melissa Robins'    8      52     2360    1378      74
'Melissa Robins'    8      51     2344    1413      65
'Melissa Robins'    8      51     2351    1400      68
'Paula Small'       9      52     2390    1412      78
'Paula Small'       9      54     2470    1422      62
'Paula Small'       9      49     2280    1382      61
'Paula Small'       9      50     2308    1410      72
'Paula Small'       9      55     2505    1410      80
'Paula Small'       9      52     2409    1382      60
'Paula Small'       9      53     2431    1422      70
'Paula Small'       9      56     2523    1388      79
'Paula Small'       9      50     2315    1404      71
'Coach McGuirk'    10      52     2406    1420      68
'Coach McGuirk'    10      58     2699    1405      65
'Coach McGuirk'    10      57     2571    1400      64
'Coach McGuirk'    10      52     2394    1420      69
'Coach McGuirk'    10      55     2518    1379      70
'Coach McGuirk'    10      52     2379    1393      61
'Coach McGuirk'    10      59     2636    1417      70
'Coach McGuirk'    10      54     2465    1414      59
'Coach McGuirk'    10      54     2479    1383      61
")
diet = read.table(textConnection(Input),header=TRUE)
rm(Input)
ex_fit <- lm(Speed ~ Pulse,
data = exercise)
egg_fit <- lm(Eggs ~ Weight,
data = egg)
diverse_fit <- lm(Species ~ Latitude,
data = diversity)
my_cor_pwr <- pwr.r.test(n = NULL,
r = 0.500,
sig.level = 0.05,
power = 0.80,
alternative = "two.sided")
egg$ln_Weight <- log(egg$Weight)
ln_egg_fit <- lm(Eggs ~ ln_Weight, data = egg)
sef <- summary(egg_fit)
slef <- summary(ln_egg_fit)
# Chunk 2: nolinregorcor
question("Select any questions that can be answered using correlation or linear regression",
answer("Is there a relationship between my dog's food intake and the amount of exercise she gets?", correct = TRUE),
answer("What is the strength of the relationship between calories and amount of sodium in an athlete's diet?", correct = TRUE),
answer("Can I predict how many eggs an amphipod carries by weighing her?", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 3: bb
question("What are NOT examples of a correlation or linear regression null hypothesis?",
answer("My electric bill is always high.", correct = TRUE),
answer("My electric bill is high no matter how much television I watch."),
answer("My electric bill is low no matter how much television I watch"),
answer("I watch a lot of television.", correct = TRUE),
allow_retry = TRUE,
random_answer_order = TRUE
)
# Chunk 4: corregpackages
if(!require(psych)){install.packages("psych")}
if(!require(PerformanceAnalytics)){install.packages("PerformanceAnalytics")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(rcompanion)){install.packages("rcompanion")}
if(!require(gvlma)){install.packages("gvlma")}
if(!require(pwr)){install.packages("pwr")}
# Chunk 5: exercise
# Chunk 6: exercise-solution
exercise
# Chunk 7: passpulse
# Chunk 8: passpulse-solution
plot(exercise)
# Chunk 9: egg
# Chunk 10: egg-solution
egg
plot(egg)
# Chunk 11: plotdiversity
# Chunk 12: plotdiversity-solution
plot(Species ~ Latitude,
data = diversity,
pch = 16)
# Chunk 13: helpcortest
# Chunk 14: helpcortest-solution
?cor.test
# Chunk 15: cordiversity
# Chunk 16: cordiversity-solution
(cordiv <- cor.test(~ Species + Latitude,
data = diversity,
method = "pearson",
conf.level = 0.95))
# Chunk 17: tf_proof
question("True or false: You have just proven that there is no relationship between the two variables.",
answer("True because _p_ > .05"),
answer("False because failing to reject the null is not the same as accepting it", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
# Chunk 18: pulsecor
# Chunk 19: pulsecor-solution
(corex <- cor.test(~ Pulse + Speed,
data = exercise,
method = "pearson",
conf.level = 0.95))
# Chunk 20: lmexer
ex_fit
summary_ex_fit
summary(ex_fit)
ex_fit <- summary(lm(Speed ~ Pulse,
data = exercise))
ex_fit$residuals
ex_fit$coefficients
lm(Speed ~ Pulse,)
lm(Speed ~ Pulse,
data = exercise)
ex_fit$coefficients
ex_fit$coefficients[1]
ex_fit <- summary(lm(Pulse ~ Speed
data = exercise))
ex_fit <- summary(lm(Pulse ~ Speed
data = exercise))
ex_fit <- summary(lm(Pulse ~ Speed.
data = exercise))
ex_fit <- summary(lm(Pulse ~ Speed,
data = exercise))
ex_fit
`r ex_fit$coefficients[2]`
ex_fit$coefficients[2]
egg_sum <- summary(egg_fit)
plot(diverse)
plot(diversity)
version()
R.Version()
vect <- c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23)
mean(vect)
for(i = 1:25){
i = i + i^2
}
for(i in 1:25){
i = i + i^2
}
i
sum(c(i, i^2))
1 + 1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2 + 8^2 + 9^2 + 10^2 + 11^2 + 12^2 + 13^2 + 14^2 + 15^2 + 16^2 + 17^2 + 18^2 + 19^2 + 20^2 + 21^2 + 22^2 + 23^2 + 24^2 + 25^2
i = i + i^2
i
myfun <- function() {
for (i in 0:25) {
i = i + i^2
}
i
}
myfun()
25^2
myfun <- function() {
for (i in 0:25) {
j = j + i^2
}
i
}
myfun()
j = 0
myfun <- function(j) {
for (i in 0:25) {
j = j + i^2
}
i
}
myfun()
myfun <- function(j = 0) {
for (i in 0:25) {
j = j + i^2
}
i
}
myfun <- function(j) {
for (i in 0:25) {
j = j + i^2
}
i
}
myfun(0)
myfun <- function(j) {
for (i in 0:25) {
j = j + i^2
}
j
}
myfun(0)
class(cars)
nrow(cars)
cars[2]
mean(cars[,2], na.rm = TRUE)
which(cars[,dist] == 85)
?which
which(x = cars[, "dist"] == 85, arr.ind = FALSE, )
cars[, "dist"] == 85
