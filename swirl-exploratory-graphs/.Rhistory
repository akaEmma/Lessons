dd <- redcap_metadata_read(redcap_uri=uri,
token=token)$data
dd
dd <- as_tibble(redcap_metadata_read(redcap_uri=uri,
token=token)$data)
head(dd)
dd <- as_tibble(redcap_metadata_read(redcap_uri=uri,
token=token)$data)
# the dataset has stuff we don't need. Fixing that:
### Make the Data Dictionary Useful
shhh(library(tidyverse))
(dd <- dd %>% select(field_name,
field_type,
field_label))
uri <- "https://redcap.chop.edu/api/"
shhh <- suppressPackageStartupMessages
shhh(library(RCurl))
shhh(library(tidyverse))
dd <- as_tibble(redcap_metadata_read(redcap_uri=uri,
token=token)$data)
# the dataset has stuff we don't need. Fixing that:
### Make the Data Dictionary Useful
shhh(library(tidyverse))
(dd <- dd %>% select(field_name,
field_type,
field_label))
# Now the data dictionary is more specific.
# The next step is to  change the format. I want the names that
# are now the first fields in each record to be variable names,
# and the current variable names to become records for each
# variable. To put it simply, I want to rotate
# the file 90$^circ$.
# The new format will have the same column names as df does.
#
# To transpose a tibble, first you gather it,
# then you spread it, thus:
dd <- dd %>%
gather(var, val, 2:ncol(dd)) %>%
spread(names(dd)[1], val) %>%
rename(metadata = var)
dd
df
df <- as_tibble(redcap_read_oneshot(redcap_uri = uri,
token = token,
raw_or_label = "label")$data)
df
library(swirlify)
library(swirl)
install_course_github(github_username = "braunsb", course_name = "Swirly Stats")
zip_course()
zip_course("Swirly_Stats")
zip_course("Swirly_Stats.swc")
pack_course()
set_lesson()
set_lesson()
pack_course()
rm(list = ls())
plot(cars)
library(swirl)
install_course_github("arcus", "Clinical_Data_in_R")
swirl()
install.packages(c("boot", "cluster", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"))
install.packages(c("cluster", "nlme"))
install.packages("swirl")
install.packages("swirlify")
library(swirlify)
install.packages("devtools")
library(devtools)
install_github("profandyfield/adventr")
remotes::install_github("profandyfield/adventr", lib = "N:/Documents/R/win-library/3.6")
remotes::install_url("https://github.com/profandyfield/adventr", lib = "N:/Documents/R/win-library/3.6")
install_github
utils::install.packages( pkgs="adventr", repos='https://cran.us.r-project.org' )
install.packages("githubinstall")
devtools::install_github("hoxo-m/githubinstall")
library(githubinstall)
githubinstall("adventr")
githubinstall("adventr", quote = "")
my_file_path
my_file_path = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library/swirl/Courses/Clinical_Data_in_R/Examining_Clinical_Data/fabricated_pt_demo.csv"
githubinstall::githubinstall("adventr")
githubinstall::githubinstall("adventr", quote = "")
remotes::install_github("profandyfield/adventr", lib = "/Library/Frameworks/R.framework/Versions/3.6")
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("R Programming")
install_course_github("arcus", "Clinical_Data_in_R")
swirl()
print("hello world")
getwd()
my_file_path
demographics <- read.csv(my_file_path)
str(demographics)
demographics_strings <- read.csv(my_file_path, stringsAsFactors = FALSE)
str(demographics_strings)
demographics$PAT_DOB <- as.character(demographics$PAT_DOB)
str(demographics)
head(demographics)
summary(demographics)
table(demographics$ETHNICITY)
rm(demographics_strings)
?table
?table()
table(demographics$ETHNICITY, useNA = "ifany")
table(demographics$SEX, demographics$RACE, useNA = "ifany")
View(demographics)
nxt()
7 * 2
typeof(c(2, 3.5, 0, -3))
str(5 > 20)
View(demographics)
str(demographics)
eye_colors <- factor(c("blue", "blue", "green", "brown", "brown", "blue"))
str(eye_colors)
eye_colors
as.integer(eye_colors)
new_sex_values <- factor(demographics$SEX, levels = c(0, 1),
labels = c("Female", "Male"))
head(new_sex_values)
check_factors <- data.frame(old = demographics$SEX, new = new_sex_values)
head(check_factors, 20)
demographics$SEX <- new_sex_values
View(demographics)
myLabels <- c("American Indian or Alaska Native", "Asian", "Black or African-American", "Native Hawaiian or Other Pacific Islander", "White", "More Than One Race", "Other", "Refused", "Unknown or not reported")
myLevels <- c(1:8, 99)
new_race_data <- factor(demographics$ETHNICITY, levels = myLevels, labels = myLabels)
new_race_data <- factor(demographics$RACE, labels = myLabels, levels = myLevels)
demographics$RACE <- new_race_data
View(demographics)
demographics$ETHNICITY <- factor(demographics$ETHNICITY, levels = c(1, 2, 99), labels = c("Hispanic or Latino", "Not Hispanic or Latino", "Unknown or Not Reported"))
str(demographics)
?strptime
?strptime()
demographics$PAT_DOB <- as.Date(demographics$PAT_DOB, format = "%m/%d/%y")
View(demographics)
summary(demographics)
getwd()
write.csv(demographics, "my_fake_demographics.csv", row.names = FALSE)
3 > 5
View(pat_meds)
unique(pat_meds$GENERIC_NM)
length(unique(pat_meds))
length(unique(pat_meds$GENERIC_NM))
View(demographics)
duplicated((pat_meds$PAT_MRN))
duplicated(pat_meds$PAT_MRN)
table(duplicated(pat_meds$PAT_MRN))
table(duplicated(demographics$PAT_MRN))
swirl()
4 + 7
head(pat_meds)
tail(pat_meds)
unique(pat_meds$GENERIC_NM)
simplified_pat_meds <- pat_meds %>% select(PAT_MRN) %>% unique()
simplified_pat_meds <- simplified_pat_meds %>% mutate(received_NSAIDS = TRUE)
Views(simplified_pat_meds)
View(simplified_pat_meds)
list_pat_meds <- pat_meds %>% group_by(PAT_MRN) %>% summarise(NSAID_list = paste(GENERIC_NM, collapse = ", "))
View(list_pat_meds)
meds_by_name <- list_pat_meds %>%
mutate(ibuprofen = grepl("ibuprofen", NSAID_list, ignore.case = TRUE),
naproxen = grepl("naproxen", NSAID_list, ignore.case = TRUE),
ketorolac = grepl("ketorolac", NSAID_list, ignore.case = TRUE),
diclofenac = grepl("diclofenac", NSAID_list, ignore.case = TRUE),
indomethacin = grepl("indomethacin", NSAID_list, ignore.case = TRUE))
View(meds_by_name)
meds_by_name <- meds_by_name %>% select(-NSAID_list)
View(meds_by_name)
View(long_sample)
wide_sample
View(wide_sample)
my_wide_data <- spread(long_sample, key = "Phone Type", value = "Number")
View(my_wide_data)
?gather()
my_long_data <- gather(data = wide_sample, key = "Phone Type", value = "Number", -Name)
View(my_long_data)
my_compact_long_data <- gather(data = wide_sample, key = "Phone Type", value = "Number", -Name, na.rm = TRUE)
View(pat_meds)
pat_meds_long <- pat_meds_long %>% mutate(received_NSAIDS = TRUE)
pat_meds <- pat_meds_long %>% mutate(received_NSAIDS = TRUE)
pat_meds <- pat_meds %>% mutate(received_NSAIDS = TRUE)
pat_meds_long <- pat_meds %>% mutate(received_med = TRUE)
View(pat_meds_long)
play()
pat_meds_long <- pat_meds_long %>% select(-received_NSAIDS)
View(pat_meds_long)
nxt()
View(pat_meds_long)
pat_meds_wide <- spread(pat_meds_long, key = "GENERIC_NM", VALUE = "received_med")
pat_meds_wide <- spread(data = pat_meds_long, key = "GENERIC_NM", VALUE = "received_med")
pat_meds_wide <- spread(pat_meds_long, key="GENERIC_NM",
value="received_med")
View(pat_meds_wide)
4 + 7
View(english)
View(math)
View(aces)
simple_merge <- merge(english, math)
View(simple_merge)
name_year_merge <- merge(english, math, by = c("name", "Year"))
name_year_merge <- merge(english, math, by = c("Name", "Year"))
View(name_year_merge)
library(swirl)
swirl()
swirl()
uninstall_all_courses()
install_course_github("arcus", "Clinical_Data_in_R")
swirl()
swirl()
library(Rcmdr)
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$reg)
reg <- table(pollution$region)
reg
play()
(stuff <- pollution$region)
(stuff <- table(pollution$region))
stuff
reg( <- table(pollution$region))
(reg <- table(pollution$region))
nxt()
nxt()
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
swirl()
str(mpg)
plot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manu)
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
ggplot(mpg, aes(displ, hwy))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = dr)) + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") +
labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
rm(list = ls())
library(downloader)
options(digits = 3, scipen = 9999)
sh <- suppressMessages # it's a library, so sh!
shh <- suppressWarnings
shhh <- suppressPackageStartupMessages
sh(shh(shhh(if(!require(dataPreparation)){install.packages("dataPreparation")})))
sh(shh(shhh(if(!require(fastDummies)){install.packages("fastDummies")})))
sh(shh(shhh(if(!require(gridBase)){install.packages("gridBase")})))
sh(shh(shhh(if(!require(ggthemr)){install.packages("ggthemr")})))
sh(shh(shhh(if(!require(downloader)){install.packages("downloader")})))
getwd()
install.packages(c("TeXCheckR", "TexExamRandomizer", "texmex"))
# List of useful packages
pkg <- c("tidyr", "dplyr", "ggplot2", "knitr", "rmarkdown")
# Check if packages are not installed and assign the
# names of the uninstalled packages to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg)) {
install.packages(new.pkg, repos = "http://cran.rstudio.com")
}
tinytex::install_tinytex()
?kruskal.wallis
?kruskall.wallis
??kruskall
?kruskal.test
Now for the test. (You might need to check R's documentation for some of these.) Add a `title` with the argument `main` set equal to the string "Wind and Ozone in NYC".
par(mfrow = c(1, 2))
View(shh)
Input = ("
Tillamook Newport Petersburg  Magadan Tvarminne
0.0571	0.0873	0.0974	0.1033	0.0703
0.0813	0.0662	0.1352	0.0915	0.1026
0.0831	0.0672	0.0817	0.0781	0.0956
0.0976	0.0819	0.1016	0.0685	0.0973
0.0817	0.0749	0.0968	0.0677	0.1039
0.0859	0.0649	0.1064	0.0697	0.1045
0.0735	0.0835	0.105	0.0764
0.0659	0.0725	 	0.0689
0.0923
0.0836
")
mussels <- read.table(textConnection(Input), header = TRUE)
Input = ("
Tillamook Newport Petersburg  Magadan Tvarminne
0.0571	0.0873	0.0974	0.1033	0.0703
0.0813	0.0662	0.1352	0.0915	0.1026
0.0831	0.0672	0.0817	0.0781	0.0956
0.0976	0.0819	0.1016	0.0685	0.0973
0.0817	0.0749	0.0968	0.0677	0.1039
0.0859	0.0649	0.1064	0.0697	0.1045
0.0735	0.0835	0.105	  0.0764	NA
0.0659	0.0725	0.0689  NA  NA
0.0923  NA  NA  NA  NA
0.0836  NA  NA  NA  NA
")
mussels <- read.table(textConnection(Input), header = TRUE)
mussels
rm(Input)
mussels
question("Select the cases where ANOVA is appropriate",
answer("each professor has three classes and you want to compare the mean class grades"),
answer("three professors have one class each and you want to compare the mean class grades", correct = TRUE),
answer("you want to compare white blood cell counts as a response to medication for four groups of patients", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
library(learnr)
library(data.table)
library(dplyr)
library(pwr)
knitr::opts_chunk$set(echo = FALSE)
options(digits = 3, scipen = 9999)
Input = ("
Tillamook Newport Petersburg  Magadan Tvarminne
0.0571	0.0873	0.0974	0.1033	0.0703
0.0813	0.0662	0.1352	0.0915	0.1026
0.0831	0.0672	0.0817	0.0781	0.0956
0.0976	0.0819	0.1016	0.0685	0.0973
0.0817	0.0749	0.0968	0.0677	0.1039
0.0859	0.0649	0.1064	0.0697	0.1045
0.0735	0.0835	0.105	  0.0764	NA
0.0659	0.0725	0.0689  NA  NA
0.0923  NA  NA  NA  NA
0.0836  NA  NA  NA  NA
")
mussels <- read.table(textConnection(Input), header = TRUE)
rm(Input)
question("Select the cases where ANOVA is appropriate",
answer("each professor has three classes and you want to compare the mean class grades"),
answer("three professors have one class each and you want to compare the mean class grades", correct = TRUE),
answer("you want to compare white blood cell counts as a response to medication for four groups of patients", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
question("Select the cases where ANOVA is appropriate",
answer("a professor has three classes and you want to compare the mean class grades"),
answer("three professors have one class each and you want to compare the mean class grades", correct = TRUE),
answer("you want to compare white blood cell counts as a response to medication for four groups of patients", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
pollution <- readRDS("pollution.RData")
setwd("/Users/braunsb/Documents/GitHub/a-MESS Lessons/swirl-exploratory-graphs")
library(learnr)
pollution <- readRDS("pollution.RData")
ppm <- pollution$pm25
pollution <- readRDS("pollution.RData")
ppm <- pollution$pm25
pollution
library(learnr)
options(digits = 3, scipen = 9999)
pollution <- readRDS("pollution.RData")
ppm <- pollution$pm25
question("Which of the following would NOT be a good reason to use graphics in data science?",
answer("To suggest modeling strategies"),
answer("To find a color that best matches the shirt you're wearing", correct = TRUE),
answer("To find patterns in data"),
random_answer_order = TRUE,
allow_retry = TRUE
)
pollution
head(pollution)
low <- pollution[pollution$pm25 < 5]
ppm <- pollution$pm25
low <- pollution[pollution$pm25 < 5,]
high <- pollution[pollution$pm25 > 15,]
low
high
west <- subset(pollution, region == "west")
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
plot(west$latitude, west$pm25, main = "West")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution, region == "east")
# Replace this comment with your new code
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution, region == "east")
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
plot(west$latitude, west$pm25, main = "West")
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution, region == "east")
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
east <- subset(pollution, region == "east")
plot(east$latitude, east$pm25, main = "East")
par(mfrow = c(2, 1), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution, region == "east")
plot(east$latitude, east$pm25, main = "East")
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution, region == "east")
plot(east$latitude, east$pm25, main = "East")
par(mfrow = c(2, 1), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
east <- subset(pollution, region == "east")
plot(east$latitude, east$pm25, main = "East")
mean(c(2, 4, 5))
function_name <- function(arg1, arg2) {
#' Manipulate arguments in some way, for example
arg1 + arg2
#' Return a value. Sometimes, as here, manipulate the value and return the argument at
#' same time. R returns the last thing. You could also do it like this:
x <- arg1 + arg2 # Manipulate
x # Return
}
arg1 <- 3.14
arg2 <- 4
function_name(arg1, arg2)
```{r www-solution}
remainder <- function(num, divisor = 2) {
num %% divisor
}
remainder(5)
remainder <- function(num, divisor = 2) {
num %% divisor
}
remainder(11,5)
remainder <- function(num, divisor = 2) {
num %% divisor
}
remainder(divisor = 11, num = 5)
remainder <- function(num, divisor = 2) {
num %% divisor
}
args(remainder)
remainder <- function(num, divisor = 2) {
num %% divisor
}
args(remainder)
remainder <- function(num, divisor = 2) {
num %% divisor
}
remainder(4, div = 2)
remainder <- function(num, divisor = 2) {
num %% divisor
}
args(remainder)
