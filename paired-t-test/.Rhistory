par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
swirl()
str(mpg)
plot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manu)
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
ggplot(mpg, aes(displ, hwy))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = dr)) + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") +
labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
rm(list = ls())
library(downloader)
options(digits = 3, scipen = 9999)
sh <- suppressMessages # it's a library, so sh!
shh <- suppressWarnings
shhh <- suppressPackageStartupMessages
sh(shh(shhh(if(!require(dataPreparation)){install.packages("dataPreparation")})))
sh(shh(shhh(if(!require(fastDummies)){install.packages("fastDummies")})))
sh(shh(shhh(if(!require(gridBase)){install.packages("gridBase")})))
sh(shh(shhh(if(!require(ggthemr)){install.packages("ggthemr")})))
sh(shh(shhh(if(!require(downloader)){install.packages("downloader")})))
getwd()
install.packages(c("TeXCheckR", "TexExamRandomizer", "texmex"))
# List of useful packages
pkg <- c("tidyr", "dplyr", "ggplot2", "knitr", "rmarkdown")
# Check if packages are not installed and assign the
# names of the uninstalled packages to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg)) {
install.packages(new.pkg, repos = "http://cran.rstudio.com")
}
tinytex::install_tinytex()
?kruskal.wallis
?kruskall.wallis
??kruskall
?kruskal.test
Now for the test. (You might need to check R's documentation for some of these.) Add a `title` with the argument `main` set equal to the string "Wind and Ozone in NYC".
par(mfrow = c(1, 2))
View(shh)
Input = ("
Tillamook Newport Petersburg  Magadan Tvarminne
0.0571	0.0873	0.0974	0.1033	0.0703
0.0813	0.0662	0.1352	0.0915	0.1026
0.0831	0.0672	0.0817	0.0781	0.0956
0.0976	0.0819	0.1016	0.0685	0.0973
0.0817	0.0749	0.0968	0.0677	0.1039
0.0859	0.0649	0.1064	0.0697	0.1045
0.0735	0.0835	0.105	0.0764
0.0659	0.0725	 	0.0689
0.0923
0.0836
")
mussels <- read.table(textConnection(Input), header = TRUE)
Input = ("
Tillamook Newport Petersburg  Magadan Tvarminne
0.0571	0.0873	0.0974	0.1033	0.0703
0.0813	0.0662	0.1352	0.0915	0.1026
0.0831	0.0672	0.0817	0.0781	0.0956
0.0976	0.0819	0.1016	0.0685	0.0973
0.0817	0.0749	0.0968	0.0677	0.1039
0.0859	0.0649	0.1064	0.0697	0.1045
0.0735	0.0835	0.105	  0.0764	NA
0.0659	0.0725	0.0689  NA  NA
0.0923  NA  NA  NA  NA
0.0836  NA  NA  NA  NA
")
mussels <- read.table(textConnection(Input), header = TRUE)
mussels
rm(Input)
mussels
question("Select the cases where ANOVA is appropriate",
answer("each professor has three classes and you want to compare the mean class grades"),
answer("three professors have one class each and you want to compare the mean class grades", correct = TRUE),
answer("you want to compare white blood cell counts as a response to medication for four groups of patients", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
library(learnr)
library(data.table)
library(dplyr)
library(pwr)
knitr::opts_chunk$set(echo = FALSE)
options(digits = 3, scipen = 9999)
Input = ("
Tillamook Newport Petersburg  Magadan Tvarminne
0.0571	0.0873	0.0974	0.1033	0.0703
0.0813	0.0662	0.1352	0.0915	0.1026
0.0831	0.0672	0.0817	0.0781	0.0956
0.0976	0.0819	0.1016	0.0685	0.0973
0.0817	0.0749	0.0968	0.0677	0.1039
0.0859	0.0649	0.1064	0.0697	0.1045
0.0735	0.0835	0.105	  0.0764	NA
0.0659	0.0725	0.0689  NA  NA
0.0923  NA  NA  NA  NA
0.0836  NA  NA  NA  NA
")
mussels <- read.table(textConnection(Input), header = TRUE)
rm(Input)
question("Select the cases where ANOVA is appropriate",
answer("each professor has three classes and you want to compare the mean class grades"),
answer("three professors have one class each and you want to compare the mean class grades", correct = TRUE),
answer("you want to compare white blood cell counts as a response to medication for four groups of patients", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
question("Select the cases where ANOVA is appropriate",
answer("a professor has three classes and you want to compare the mean class grades"),
answer("three professors have one class each and you want to compare the mean class grades", correct = TRUE),
answer("you want to compare white blood cell counts as a response to medication for four groups of patients", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
evaluate <- function(func, dat){
func(dat)
}
evaluate(function(x) {x[length(x)]}, c(8, 4, 0))
?Rtools
?rtools
install.packages("lsr")
group_by(.data = ht, section)
library(dplyr)
group_by(.data = ht, section)
options(digits = 3, scipen = 9999)
if(!require(learnr)){install.packages("learnr")}
library(learnr)
this_Input =("
Group Value
2pm    69
2pm    70
2pm    66
2pm    63
2pm    68
2pm    70
2pm    69
2pm    67
2pm    62
2pm    63
2pm    76
2pm    59
2pm    62
2pm    75
2pm    62
2pm    72
2pm    63
5pm    68
5pm    62
5pm    67
5pm    68
5pm    69
5pm    67
5pm    61
5pm    59
5pm    62
5pm    61
5pm    69
5pm    66
5pm    62
5pm    61
5pm    70
")
ht = read.table(textConnection(this_Input),header=TRUE)
names(ht) <- c("section", "inches")
tt_height <- t.test(inches ~ section,
data =ht,
var.equal = TRUE,
conf.level = 0.95)
p_height <- round(tt_height$p.value, 2)
head(ht)
library(dplyr)
group_by(.data = ht, section)
class(ht$section)
class(ht$inches)
by_section <- ht %>%
dplyr::group_by(section)
by_section
telegram <- function(...){
paste("START", ..., "STOP")
}
telegram("I am an argument that was wanted here")
mad_libs <- function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
options(digits = 3, scipen = 9999)
this_Input = ("
Beach	2011	2012	2012−2011
Bennetts Pier	35282	21814	-13468
Big Stone	359350	83500	-275850
Broadkill	45705	13290	-32415
Cape Henlopen	49005	30150	-18855
Fortescue	68978	125190	56212
Fowler	8700	4620	-4080
Gandys	18780	88926	70146
Higbees	13622	1205	-12417
Highs	24936	29800	4864
Kimbles	17620	53640	36020
Kitts Hummock	117360	68400	-48960
Norburys Landing	102425	74552	-27873
North Bowers	59566	36790	-22776
North Cape May	32610	4350	-28260
Pickering	137250	110550	-26700
Pierces Point	38003	43435	5432
Primehook	101300	20580	-80720
Reeds	62179	81503	19324
Slaughter	203070	53940	-149130
South Bowers	135309	87055	-48254
South CSL	150656	112266	-38390
Ted Harvey	115090	90670	-24420
Townbank	44022	21942	-22080
Villas	56260	32140	-24120
Woodland	125	1260	1135")
crabs = read.table(textConnection(this_Input),header=TRUE)
this_Input = ("
Beach	2011	2012	2012−2011
"Bennetts Pier"	35282	21814	-13468
"Big Stone"	359350	83500	-275850
Broadkill	45705	13290	-32415
"Cape Henlopen"	49005	30150	-18855
Fortescue	68978	125190	56212
Fowler	8700	4620	-4080
Gandys	18780	88926	70146
Higbees	13622	1205	-12417
Highs	24936	29800	4864
Kimbles	17620	53640	36020
"Kitts Hummock"	117360	68400	-48960
"Norburys Landing"	102425	74552	-27873
"North Bowers"	59566	36790	-22776
"North Cape May"	32610	4350	-28260
Pickering	137250	110550	-26700
"Pierces Point"	38003	43435	5432
Primehook	101300	20580	-80720
Reeds	62179	81503	19324
Slaughter	203070	53940	-149130
"South Bowers"	135309	87055	-48254
"South CSL"	150656	112266	-38390
"Ted Harvey"	115090	90670	-24420
Townbank	44022	21942	-22080
Villas	56260	32140	-24120
Woodland	125	1260	1135")
this_Input = ("
Beach,2011,2012,2012−2011
Bennetts,Pier,35282,21814,-13468
Big Stone,359350,83500,-275850
Broadkill,45705,13290,-32415
Cape Henlopen,49005,30150,-18855
Fortescue,68978,125190,56212
Fowler,8700,4620,-4080
Gandys,18780,88926,70146
Higbees,13622,1205,-12417
Highs,24936,29800,4864
Kimbles,17620,53640,36020
Kitts Hummock,117360,68400,-48960
Norburys Landing,102425,74552,-27873
North Bowers,59566,36790,-22776
North Cape May,32610,4350,-28260
Pickering,137250,110550,-26700
Pierces Point,38003,43435,5432
Primehook,101300,20580,-80720
Reeds,62179,81503,19324
Slaughter,203070,53940,-149130
South Bowers,135309,87055,-48254
South CSL,150656,112266,-38390
Ted Harvey,115090,90670,-24420
Townbank,44022,21942,-22080
Villas,56260,32140,-24120
Woodland,125,1260,1135")
crabs = read.table(textConnection(this_Input),header=TRUE)
setwd("/Users/braunsb/Documents/GitHub/a-MESS Lessons/sb-paired-t-test")
crabs = read_csv("crabs.csv",header=TRUE)
library(readr)
options(digits = 3, scipen = 9999)
crabs = read_csv("crabs.csv",header=TRUE)
crabs = read_csv("crabs.csv")
options(digits = 3, scipen = 9999)
if(!require(learnr)){install.packages("learnr")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(coin)){install.packages("coin")}
if(!require(pwr)){install.packages("pwr")}
this_Input =("
Group Value
2pm    69
2pm    70
2pm    66
2pm    63
2pm    68
2pm    70
2pm    69
2pm    67
2pm    62
2pm    63
2pm    76
2pm    59
2pm    62
2pm    75
2pm    62
2pm    72
2pm    63
5pm    68
5pm    62
5pm    67
5pm    68
5pm    69
5pm    67
5pm    61
5pm    59
5pm    62
5pm    61
5pm    69
5pm    66
5pm    62
5pm    61
5pm    70
")
ht = read.table(textConnection(this_Input),header=TRUE)
names(ht) <- c("section", "inches")
tt_height <- t.test(inches ~ section,
data =ht,
var.equal = TRUE,
conf.level = 0.95)
p_height <- round(tt_height$p.value, 2)
library(lsr)
ht_d <- cohensD(inches ~ section, data = ht, method  = "unequal")
p_height <- round(tt_height$p.value, 2)
birds_Input = ("
Bird   Typical  Odd
A     -0.255   -0.324
B     -0.213   -0.185
C     -0.190   -0.299
D     -0.185   -0.144
E     -0.045   -0.027
F     -0.025   -0.039
G     -0.015   -0.264
H      0.003   -0.077
I      0.015   -0.017
J      0.020   -0.169
K      0.023   -0.096
L      0.040   -0.330
M      0.040   -0.346
N      0.050   -0.191
O      0.055   -0.128
P      0.058   -0.182
")
birds = read.table(textConnection(birds_Input),header=TRUE)
head(birds)
t.test(Data$Typical,
Data$Odd,
paired=TRUE,
conf.level=0.95)
t.test(birds$Typical,
birds$Odd,
paired=TRUE,
conf.level=0.95)
question("The assumptions of a paired _t_ test are which?",
answer("That the data is normally distributed"),
answer("That the data is homeoscedastic"),
answer("That the differences between the pairs are normally distributed", correct = TRUE),
answer("That the differences between the pairs are homeoscedastic"),
random_answer_order = TRUE,
allow_retry = TRUE
)
question("What are NOT examples of a paired _t_ test null hypothesis?",
answer("My electric bill is always high.", correct = FALSE),
answer("People in my neighborhood pay just as much for electricity this year as last year.", correct = TRUE),
answer("My electric bill is low no matter which year it is"),
answer("I watch a lot of television.", correct = FALSE),
allow_retry = TRUE,
random_answer_order = TRUE
)
question("What are NOT examples of a paired _t_ test null hypothesis?",
answer("My electric bill is always high.", correct = TRUE),
answer("People in my neighborhood pay just as much for electricity this year as last year.", correct = FALSE),
answer("My electric bill is low no matter which year it is", correct = TRUE),
answer("I watch a lot of television.", correct = TRUE),
allow_retry = TRUE,
random_answer_order = TRUE
)
question("With which kind of data can you run a paired _t_ test?",
answer("wide data", correct = TRUE),
answer("long data", correct = TRUE),
answer("pink data"),
answer("data with a fox in a box"),
random_answer_order = TRUE,
allow_retry = TRUE
)
t.test(birds$Typical,
birds$Odd,
paired=TRUE,
conf.level=0.95)
question("What do you conclude from the paired _t_ test you just ran?",
answer("That the null hypothesis is true"),
answer("That the true difference in means is not equal to 0", correct = TRUE),
answer("That the difference between every pair of means is 0.137"),
answer("That the null hypothesis can be safely rejected", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
library(readr)
difference = birds$Odd - birds$Typical
plot(difference,
pch = 16,
ylab="Difference (Odd – Typical)")
abline(0,0, col="blue", lwd=2)
difference = birds$Odd - birds$Typical
plot(difference,
pch = 16,
ylab="Difference (Odd – Typical)")
abline(0, 0, col="blue", lwd=2)
question("How do you interpret the plot you just made?",
answer("I don't interpret it. I just like looking at it."),
answer("I see a relationship between Odd and Typical birds."),
answer("A regression line would be negative."),
answer("If the true differences of the means were 0, all the dogs would be along the blue line", correct = TRUE),
random_answer_order = TRUE,
allow_retry = TRUE
)
difference = birds$Odd - birds$Typical
plot(difference,
pch = 16,
ylab="Difference (Odd – Typical)")
abline(0, 0, col="blue", lwd=2)
plot(Data$Typical, Data$Odd,
pch = 16,
xlab="Typical feathers",
ylab="Odd feathers")
abline(0,1, col="blue", lwd=2)
plot(birds$Typical, birds$Odd,
pch = 16,
xlab="Typical feathers",
ylab="Odd feathers")
abline(0,1, col="blue", lwd=2)
question("What does the blue line represent in the plot you just made?",
answer("Where the dots would be if all differences were 0"),
answer("A positive regression line"),
answer("The line above which values are illegal"),
random_answer_order = TRUE,
allow_retry = TRUE
)
question("What does the blue line represent in the plot you just made?",
answer("Where the dots would be if all differences were 0", correct = TRUE),
answer("A positive regression line"),
answer("The line above which values are illegal"),
random_answer_order = TRUE,
allow_retry = TRUE
)
question("What does the blue line represent in the plot you just made?",
answer("Where the dots would be the differences between the yellowness values was 0", correct = TRUE),
answer("A positive regression line"),
answer("The line above which values are illegal"),
random_answer_order = TRUE,
allow_retry = TRUE
)
plot(birds$Typical, birds$Odd,
pch = 16,
xlab="Typical feathers",
ylab="Odd feathers")
abline(0,1, col="blue", lwd=2)
